package datastructure;

public class LinkedList<E> {

	private Node head = null;
	private Node  tail = null;
	private int length;

	public void add(E e) {
		Node newNode = new Node(e);
		if (head == null) {
			head = newNode;
			tail = newNode;
		} else {
			tail.setNext(newNode);
			tail = newNode;
		}
		length++;
	}
	public void add(int idx, E e) {
		Node newNode = new Node(e);
		Node node = head;
		Node temp;
		if(idx >= length) {
			throw new ArrayIndexOutOfBoundsException("Invalid Index");
		}
		for(int i=0;i<idx-1;i++) {
			node = node.getNext();
		}
		temp = node.getNext();
		node.setNext(newNode);
		newNode.setNext(temp);
	}

	public void set(int idx, E e) {
		Node node = head;
		for(int i=0;i<idx;i++) {
			node = node.getNext();
		}
		node.data = e;

	}

	public E get(int idx) {
		Node node = head;
		for(int i=0;i<idx;i++) {
			node = node.getNext();
		}
		return node.data;
		
	}

	public void reverse() {
		Node prev= null;
		Node curr = head;
		Node temp = null;
		tail = head;
		while(curr != null) {
			temp = curr.getNext();
			curr.setNext(prev);
			prev = curr;
			curr = temp;
		}
		head = prev;
	}

	public void remove(int idx) {
		Node prev = head;
		Node node = prev.getNext();
		for(int i=0;i<idx-1;i++) {
			node = node.getNext();
			prev = prev.getNext();
		}
		prev.setNext(node.getNext());
	}

	public void remove(E e) {
		Node prev=head;
		Node node = prev.next;
		if(prev.getData() == e) {
			head = prev.next;
		}
		else {
			while(node!=null) {
				if(node.data == e) {
					prev.next = node.next;
				}
				else {
					prev=prev.next;
					node=node.next;
				}
			}
		}
	}

	public void iterator() {
		Node node = head;
		while(node != null) {
			System.out.print(node.data + " " );
			node = node.next;
		}
		System.out.println();
	}
	
	public static void main(String[] args) {
		LinkedList<Integer> ll = new LinkedList<Integer>();
		ll.add(new Integer(1));
		ll.add(new Integer(2));
		ll.add(new Integer(3));
		ll.add(new Integer(4));
		ll.add(new Integer(5));
		ll.add(new Integer(6));
		ll.iterator();
		ll.reverse();
		ll.iterator();
		ll.remove(3);
		ll.iterator();
		ll.set(2, new Integer(7));
		ll.iterator();
		ll.add(0, new Integer(8));
		ll.iterator();
		System.out.println(ll.get(4));
		
	}

	private class Node {
		private E data;
		private Node next;

		public Node(E data) {
			super();
			this.data = data;
		}

		public Node(E data, Node next) {
			super();
			this.data = data;
			this.next = next;
		}

		public E getData() {
			return data;
		}

		public void setData(E data) {
			this.data = data;
		}

		public Node getNext() {
			return next;
		}

		public void setNext(Node next) {
			this.next = next;
		}

	}

}